1.每周至少做一个 leetcode 的算法题
2.阅读并点评至少一篇英文技术文章
3.学习至少一个技术技巧
4.分享一篇有观点和思考的技术文章


######A:
   public static double findMedianSortedArrays(int[] nums1, int[] nums2) {

        double result = -1;
        int length1 = nums1.length;
        int length2 = nums2.length;
        int k = 0;
        int[] tmp = new int[length1+length2];
        int length3 = length1 + length2;

        int pos1 = 0, pos2 = 0;
        for (int i = 0; i < length3; i++) {
            if(pos1 < length1 && pos2 < length2){
                if (nums1[pos1] > nums2[pos2]){
                    tmp[i] = nums2[pos2];
                    pos2++;
                }else{
                    tmp[i] = nums1[pos1];
                    pos1++;
                }
            } else if(pos1 < length1){
                tmp[i] = nums1[pos1];
                pos1++;
            }else if(pos2 < length2){
                tmp[i] = nums2[pos2];
                pos2++;
            }
        }

        int index = (int)Math.floor(length3/2);
        if(length3 % 2 == 1){
            result = tmp[index];
        }else{
            int r = (tmp[index-1] + tmp[index]);
            //  / 2 得不到正确结果，要 / 2.0, 才可以得到double结果
            result = r / 2.0;
        }

        return result;
    }

######R:
1. --with-debug
2. error_log xxx debug
3. log


######T:
//这是一个标准答案
       public static double findMedianSortedArrays2(int[] A, int[] B) {
            int m = A.length;
            int n = B.length;
            if (m > n) { // to ensure m<=n
                int[] temp = A; A = B; B = temp;
                int tmp = m; m = n; n = tmp;
            }
            int iMin = 0, iMax = m, halfLen = (m + n + 1) / 2;
            while (iMin <= iMax) {
                int i = (iMin + iMax) / 2;
                int j = halfLen - i;
                if (i < iMax && B[j-1] > A[i]){
                    iMin = i + 1; // i is too small
                }
                else if (i > iMin && A[i-1] > B[j]) {
                    iMax = i - 1; // i is too big
                }
                else { // i is perfect
                    int maxLeft = 0;
                    if (i == 0) { maxLeft = B[j-1]; }
                    else if (j == 0) { maxLeft = A[i-1]; }
                    else { maxLeft = Math.max(A[i-1], B[j-1]); }
                    if ( (m + n) % 2 == 1 ) { return maxLeft; }

                    int minRight = 0;
                    if (i == m) { minRight = B[j]; }
                    else if (j == n) { minRight = A[i]; }
                    else { minRight = Math.min(B[j], A[i]); }

                    return (maxLeft + minRight) / 2.0;
                }
            }
            return 0.0;
        }

######S:
1.http://nginx.org/en/docs/hash.html
2.nginx存服务器名，指令值，请示头等采用hash Table
3.指定hash大小的值是 server_names_hash_max_size， server_names_hash_bucket_size. 